import ollama from "ollama";

async function fetchJsonResponseForSingleIssue(issue, prompt) {
    const response = await ollama.chat({
        model: process.env.LLM || "deepseek-r1:7b",
        stream: false,
        format: {
            type: "object",
            properties: {
                path: {
                    type: "string"
                },
                threat: {
                    type: "boolean"
                },
                recommendations: {
                    type: "array",
                    items: {
                        type: "string"
                    }
                },
                vulnerability: {
                    type: "string"
                }
            },
            required: ["path", "threat", "recommendations", "vulnerability"]
        },
        messages: [
            {
                role: "system",
                content: `
You are an expert in API and OpenAPI security. Your task is to analyze the results of the OpenAPI security linter according to the OWASP API Security rules (spectral-owasp-api-security-ruleset).  

You will be provided with:
1. The linter output containing detected security issues.

Your objective:
- Carefully analyze the linter's findings.  
- Extract relevant security issues and recommendations for mitigation.
- set the threat field TRUE if the defect is considered positive, FALSE if not
                `
            },
            { role: "user", content: JSON.stringify(issue, null, 2) },  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç
            { role: "user", content: prompt }
        ]
    });

    // console.log("‚úÖ –û—Ç–≤–µ—Ç –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞:", response.message.content);
    return JSON.parse(response.message.content); // üî• –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç
}

export async function ExtractDataWithAiExecutor(environment) {
    try {
        const prompt = await environment.getInput("Prompt");
        if (!prompt) {
            environment.log.error("input -> Prompt not defined");
            return false;
        }

        let content = environment.getInput("Content");
        if (!content) {
            environment.log.error("input -> Content not defined");
            return false;
        }

        content = JSON.parse(content);

        // üìå –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ –æ—à–∏–±–æ–∫ –∏–∑ resultSet
        const issues = content.resultSet?.results || [];

        if (issues.length === 0) {
            environment.log.info("‚úÖ –ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ OpenAPI –ª–æ–≥–µ.");
            environment.setOutput("Extracted data", "[]");
            return true;
        }

        // üöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏
        const allResults = [];
        for (let i = 0; i < issues.length; i++) {
            const aiResponse = await fetchJsonResponseForSingleIssue(issues[i], prompt);
            allResults.push(aiResponse); // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
        }

        environment.log.info("‚úÖ –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã!");
        environment.setOutput("Extracted data", JSON.stringify(allResults));

        return true;
    } catch (error) {
        environment.log.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è AI-–∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
        return false;
    }
}


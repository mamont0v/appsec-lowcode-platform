"server-only";
import crypto from "crypto";

const ALGO = "aes-256-gcm"; // –≤–º–µ—Å—Ç–æ CBC
const IV_SIZE = 12;  // GCM —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç 12 –±–∞–π—Ç IV
const KEY = process.env.ENCRYPTION_KEY; // 256 –±–∏—Ç = 32 –±–∞–π—Ç–∞
if (!KEY) throw new Error("Encryption key not found!");

// –§—É–Ω–∫—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–∫–ª—é—á –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–î)
export const symmetricEncryptData = (data: string): string => {
    const iv = crypto.randomBytes(IV_SIZE);
    const key = Buffer.from(KEY, "hex");

    const cipher = crypto.createCipheriv(ALGO, key, iv);
    const encrypted = Buffer.concat([cipher.update(data, "utf8"), cipher.final()]);
    const authTag = cipher.getAuthTag();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ IV, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ authTag
    return `${iv.toString("hex")}:${encrypted.toString("hex")}:${authTag.toString("hex")}`;
};

// –§—É–Ω–∫—Ü–∏—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
export const symmetricDecryptData = (encryptedString: string): string => {
    const [ivHex, encryptedDataHex, authTagHex] = encryptedString.split(":");

    const iv = Buffer.from(ivHex, "hex");
    const encryptedData = Buffer.from(encryptedDataHex, "hex");
    const authTag = Buffer.from(authTagHex, "hex");
    const key = Buffer.from(KEY, "hex");

    const decipher = crypto.createDecipheriv(ALGO, key, iv);
    decipher.setAuthTag(authTag);

    const decrypted = Buffer.concat([decipher.update(encryptedData), decipher.final()]);
    return decrypted.toString("utf8");
};

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
// const encrypted = encryptData("Hello, World!");
// console.log("üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", encrypted);

// const decrypted = decryptData(encrypted);
// console.log("üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", decrypted);
